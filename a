#ifndef ALU_H
#define ALU_H

#include "cpu.h"
#include <stdint.h>

void ADD(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void SUB(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void MUL(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void DIV(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void AND(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void OR(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void XOR(uint16_t reg1, uint16_t reg2, uint16_t reg3);
void NOT(uint16_t reg1, uint16_t reg2);
void CMP(uint16_t reg1, uint16_t reg2);

#endif
#ifndef CCU_H
#define CCU_H

#include <stdlib.h>
#include <stdio.h>
#include "cpu.h"
#include "ram.h"
#include "alu.h"
#include "dmis.h"
#include "iois.h"
#include "fcis.h"
#include "code.h"

void decode();
void fetch();
int run();

#endif
#ifndef CODE_H
#define CODE_H

extern int code[];
extern int code_size;

#endif
#ifndef CPU_H
#define CPU_H

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
	uint16_t name;
	uint16_t value;
} reg;

extern reg registers[];

extern char char_table[];

extern uint16_t pc;

extern uint16_t opcode;
extern uint16_t arg1;
extern uint16_t arg2;
extern uint16_t arg3;

extern uint16_t le;
extern uint16_t ld;
extern uint16_t lg;
extern uint16_t ll;
extern uint16_t lge;
extern uint16_t lle;

void start_reg();
void halt();

#endif
#ifndef DMIS_H
#define DMIS_H

#include "cpu.h"
#include "ram.h"
#include <stdint.h>

void LOAD(uint16_t reg, uint16_t addrss);
void STORE(uint16_t addrss, uint16_t reg);
void MOVE(uint16_t reg1, uint16_t reg2);
void LOADI(uint16_t reg, uint16_t value);

#endif
#ifndef FCIS_H
#define FCIS_H

#include "cpu.h"
#include "ccu.h"
#include <stdint.h>

void JMP(uint16_t addrss);
void JE(uint16_t addrss);
void JNE(uint16_t addrss);
void JG(uint16_t addrss);
void JL(uint16_t addrss);
void JGE(uint16_t addrss);
void JLE(uint16_t addrss);

#endif
#ifndef IOIS_H
#define IOIS_H

#include "cpu.h"
#include "ram.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void INP(uint16_t type, uint16_t addrss, uint16_t size);
void OUT(uint16_t type, uint16_t addrss, uint16_t size);

#endif
#ifndef RAM_H
#define RAM_H

#include <stdint.h>

typedef struct {
	uint16_t address;
	uint16_t value;
} ram;

extern ram memory[];

void start_ram();

#endif
#include "alu.h"

void ADD(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value + registers[reg2].value;
	registers[reg3].value = result;
}

void SUB(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value - registers[reg2].value;
	registers[reg3].value = result;
}

void MUL(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value * registers[reg2].value;
	registers[reg3].value = result;
}

void DIV(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value / registers[reg2].value;
	registers[reg3].value = result;
}

void AND(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value & registers[reg2].value;
	registers[reg3].value = result;
}

void OR(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value | registers[reg2].value;
	registers[reg3].value = result;
}

void XOR(uint16_t reg1, uint16_t reg2, uint16_t reg3) {
	uint16_t result = registers[reg1].value ^ registers[reg2].value;
	registers[reg3].value = result;
}

void NOT(uint16_t reg1, uint16_t reg2) {
  uint16_t number = registers[reg1].value;
  registers[reg2].value = ~number;
}

void CMP(uint16_t reg1, uint16_t reg2) {
	uint16_t a = registers[reg1].value;
	uint16_t b = registers[reg2].value;

	le = 0;
	ld = 0;
	lg = 0;
	ll = 0;
	lge = 0;
	lle = 0;

	if (a == b) {
		le = 1;
	}
	if (a != b) {
		ld = 1;
	}
	if (a > b) {
		lg = 1;
	}
	if (a < b) {
		ll = 1;
	}
	if (a >= b) {
		lge = 1;
	}
	if (a <= b) {
		lle = 1;
	}
}
#include "ccu.h"

void decode() {
	for (int i = 0; i < code_size; i++) {
		if (memory[i].value < 55535) {
			memory[i].value = code[i];
		}
	}
}

void fetch() {
	opcode = memory[pc].value;
	arg1 = memory[pc + 1].value;
	arg2 = memory[pc + 2].value;
	arg3 = memory[pc + 3].value;
	pc += 4;
}

int run() {
	switch (opcode) {
		case 1:
			ADD(arg1, arg2, arg3);
			break;
		case 2:
			SUB(arg1, arg2, arg3);
			break;
		case 3:
			MUL(arg1, arg2, arg3);
			break;
		case 4:
			DIV(arg1, arg2, arg3);
			break;
		case 5:
			AND(arg1, arg2, arg3);
			break;
		case 6:
			OR(arg1, arg2, arg3);
			break;
		case 7:
			XOR(arg1, arg2, arg3);
			break;
    case 8:
      NOT(arg1, arg2);
      break;
		case 9:
			LOAD(arg1, arg2);
			break;
		case 10:
			STORE(arg1, arg2);
			break;
		case 11:
			LOADI(arg1, arg2);
			break;
		case 12:
			MOVE(arg1, arg2);
			break;
		case 13:
			CMP(arg1, arg2);
			break;
		case 14:
			JMP(arg1);
			break;
		case 15:
			JE(arg1);
			break;
		case 16:
			JNE(arg1);
			break;
		case 17:
			JG(arg1);
			break;
		case 18:
			JL(arg1);
			break;
		case 19:
			JGE(arg1);
			break;
		case 20:
			JLE(arg1);
			break;
		case 21:
			INP(arg1, arg2, arg3);
			break;
		case 22:
			OUT(arg1, arg2, arg3);
			break;
		case 23:
			halt();
      break;
		default:
			puts("Invalid Instruction");
      halt();
	}
	return 0;
}
#include "code.h"

int code[] = {
  21,1,55535,15,
  22,1,55535,15,
  23,0,0,0,
};
int code_size = sizeof(code) / sizeof(code[0]);
#include "cpu.h"

reg registers[16];

char char_table[95] = {
	'a', 'b', 'c', 'd',
	'e', 'f', 'g', 'h',
	'i', 'j', 'k', 'l',
	'm', 'n', 'o', 'p',
	'q', 'r', 's', 't',
	'u', 'v', 'w', 'x',
	'y', 'z', 'A', 'B',
	'C', 'D', 'E', 'F',
	'G', 'H', 'I', 'J',
	'K', 'L', 'M', 'N',
	'O', 'P', 'Q', 'R',
	'S', 'T', 'U', 'V',
	'W', 'X', 'Y', 'Z',
	'0', '1', '2', '3',
	'4', '5', '6', '7',
	'8', '9', '!', '@',
	'#', '$', '%', '^',
	'&', '*', '(', ')',
	'-', '_', '=', '+',
	'`', '~', '\\', '|',
	',', '.', '<', '>',
	'/', '?', ';', ':',
	'[', ']', '{', '}',
	'"', ' '
};

uint16_t pc = 0;

uint16_t opcode = 0;
uint16_t arg1 = 0;
uint16_t arg2 = 0;
uint16_t arg3 = 0;

uint16_t le = 0;
uint16_t ld = 0;
uint16_t lg = 0;
uint16_t ll = 0;
uint16_t lge = 0;
uint16_t lle = 0;

void start_reg() {
	for (int i = 0; i < 16; i++) {
		registers[i].name = i;
		registers[i].value = 0;
	}
}

void halt() {
  puts("Shutting Down...");
  getchar();
  exit(0);
}
#include "dmis.h"

void LOAD(uint16_t reg, uint16_t addrss) {
	registers[reg].value = memory[addrss].value;
}

void STORE(uint16_t addrss, uint16_t reg) {
	memory[addrss].value = registers[reg].value;
}

void MOVE(uint16_t reg1, uint16_t reg2) {
	registers[reg1].value = registers[reg2].value;
}

void LOADI(uint16_t reg, uint16_t value) {
	registers[reg].value = value;
}
#include "fcis.h"

void JMP(uint16_t addrss) {
	pc = addrss;
}

void JE(uint16_t addrss) {
	if (le == 1) {
		pc = addrss;
	}
}

void JNE(uint16_t addrss) {
	if (le == 0) {
		pc = addrss;
	}
}

void JG(uint16_t addrss) {
	if (lg == 1) {
		pc = addrss;
	}
}

void JL(uint16_t addrss) {
	if (ll == 1) {
		pc = addrss;
	}
}

void JGE(uint16_t addrss) {
	if (lge == 1) {
		pc = addrss;
	}
}

void JLE(uint16_t addrss) {
	if (lle == 1) {
		pc = addrss;
	}
}
#include "iois.h"

void INP(uint16_t type, uint16_t addrss, uint16_t size) {
	if (type == 0) {
		scanf("%hd", &memory[addrss].value);
	} else if (type == 1) {
		char string[size + 1];
    fgets(string, size, stdin);
    string[strcspn(string, "\n")] = '\0';

    char char_codes[size + 1];

    for (int i = 0; i < size; i++) {
      char_codes[i] = string[i];
    }

    for (int i = addrss; i < addrss + size; i++) {
      for (int j = 0; j < 95; j++) {
        if (char_table[j] == char_codes[i - addrss]) {
          memory[i].value = j;
        }
      }
    }
	} else {
    return;
  }
}

void OUT(uint16_t type, uint16_t addrss, uint16_t size) {
	if (type == 0) {
		printf("%hd\n", memory[addrss].value);
	} else if (type == 1) {
		for (int i = addrss; i < addrss + size; i++) {
      if (char_table[memory[i].value] == '^') {
        printf("\n");
      } else {
        printf("%c", char_table[memory[i].value]);
      }
    }
	} else {
    return;
  }
}
#include <stdio.h>
#include "cpu.h"
#include "ram.h"
#include "ccu.h"

int main() {
	puts("TARCH Bios v0.3 alpha build 2024-12-26");
	puts("--------------------------------------");
	puts("Starting registers...");
	start_reg();
	puts("Starting RAM...");
	start_ram();
	puts("Decoding...");
	decode();
	puts("Running...");
	if (memory[0].value != 0) {
		while (1) {
			fetch();
			run();
		}
	} else {
		puts("RAM are empty! No instruction to read");
    halt();
	}
	return 0;
}
#include "ram.h"

ram memory[65536] = {};

void start_ram() {
	for (int i = 0; i < 65536; i++) {
		memory[i].address = i;
		memory[i].value = 0;
	}
}
